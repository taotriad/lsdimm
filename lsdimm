#! /usr/bin/env python3
# [:::MUNGE SHEBANG:::]

# Suggests: python3-natsort

# Copyright David Weinehall.
# SPDX-License-Identifier: MIT

# pylint: disable=too-many-lines

"""
This program shows information about the memory configuration of a system
in a terse manner.
"""

import copy
from enum import IntEnum
import errno
import json
from operator import itemgetter
from pathlib import Path
import subprocess  # nosec
from subprocess import PIPE, STDOUT  # nosec
import sys
from typing import Any, cast

try:
    from natsort import natsorted
except ModuleNotFoundError:  # pragma: no cover
    natsorted = sorted  # type: ignore

HOMEDIR = Path.home()

# Strict set of paths; only distro-provided binaries
dmidecode_paths: list[str] = ["/usr/sbin/dmidecode", "/sbin/dmidecode"]
# Wider set of paths that contains locally installed packages
# dmidecode_paths: list[str] = ["/usr/sbin/dmidecode", "/sbin/dmidecode", "/opt/bin/dmidecode",
#                               "/usr/local/bin/dmidecode", f"{HOMEDIR}/bin/dmidecode"]

ARGUMENT: str = "\033[0;32m"              # green
DIM: str = "\033[38;5;240m\033[1m"        # grey + dim + bold
ERROR: str = "\033[0;31m"                 # red
WARNING: str = "\033[1;33m"               # yellow + bright
HEADER: str = "\033[1;37m"                # white + bright
OPTION: str = "\033[0;36m"                # cyan
PROGRAMNAME: str = "\033[1;37m"           # white + bright
RESET: str = "\033[0m"                    # reset all attributes
SEPARATOR: str = "\033[38;5;240m\033[1m"  # grey + dim + bold


# In some cases the voltage information may be incorrect
# Options:
#   "Minimum Voltage"
#   "Maximum Voltage"
#   "Configured Voltage"
#   "Heuristic"  (Configured Voltage unless it's less than 0.25V this may need to be adjusted down
#                 if some type of low power DIMM is released that consumes less than that)
voltage_source: str = "Heuristic"
voltage_limit: float = 0.25


class SortColumn(IntEnum):
    """
    Sort column for the DIMM list.
    """
    DEFAULT = 0
    LOCATOR = 0
    SIZE = 1
    TYPE = 2
    SPEED_AND_VOLTAGE = 3
    MANUFACTURER = 4
    PART_NUMBER = 5
    INVALID = -1


sort_column_lookup: dict[str, SortColumn] = {
    "default": SortColumn.LOCATOR,
    "locator": SortColumn.LOCATOR,
    "size": SortColumn.SIZE,
    "type": SortColumn.TYPE,
    "speed-and-voltage": SortColumn.SPEED_AND_VOLTAGE,
    "manufacturer": SortColumn.MANUFACTURER,
    "part-number": SortColumn.PART_NUMBER,
}

# Some DMI data return incorrect vendor data; correct it.
vendor_quirks: dict[str, dict[str, str]] = {
    "exact": {
        "1315": "Crucial",
        "0821": "EVGA",
        "Hynix": "SK Hynix",
        "Hynix Semiconductor": "SK Hynix",
        "JEDEC 1D:01 98": "Kingston",
        "Kinston": "Kingston",
        "Micron Technology": "Micron",
    },
    "affixes": {
        "0001": "AMD",
        "0002": "AMI",
        "0083": "Fairchild",
        "0004": "RAMXEED Limited",
        "0085": "GTE",
        "0086": "Harris",
        "0007": "Hitachi",
        "0008": "Inmos",
        "0089": "Intel",
        "008A": "I.T.T.",
        "000B": "Intersil",
        "008C": "Monolithic Memories",
        "000D": "Mostek",
        "000E": "Freescale (Motorola)",
        "008F": "National",
        "0010": "NEC",
        "0091": "RCA",
        "0092": "Raytheon",
        "0013": "Synaptics",
        "0094": "Seeq",
        "0015": "NXP (Philips)",
        "0016": "Synertek",
        "0097": "Texas Instruments",
        "0098": "Kioxia Corporation",
        "0019": "Xicor",
        "001A": "Zilog",
        "009B": "Eurotechnique",
        "001C": "Mitsubishi",
        "009D": "Lucent (AT&T)",
        "009E": "Exel",
        "001F": "Atmel",
        "0020": "STMicroelectronics",
        "00A1": "Lattice Semi.",
        "00A2": "NCR",
        "0023": "Wafer Scale Integration",
        "00A4": "IBM",
        "0025": "Tristar",
        "0026": "Visic",
        "00A7": "Intl. CMOS Technology",
        "00A8": "SSSI",
        "0029": "Microchip Technology",
        "002A": "Ricoh Ltd",
        "00AB": "VLSI",
        "002C": "Micron",
        "00AD": "SK Hynix",
        "00AE": "OKI Semiconductor",
        "002F": "ACTEL",
        "00B0": "Sharp",
        "0031": "Catalyst",
        "0032": "Panasonic",
        "00B3": "IDT",
        "0034": "Cypress",
        "00B5": "DEC",
        "00B6": "LSI Logic",
        "0037": "Zarlink (Plessey)",
        "0038": "UTMC",
        "00B9": "Thinking Machine",
        "00BA": "Thomson CSF",
        "003B": "Integrated CMOS (Vertex)",
        "00BC": "Honeywell",
        "003D": "Tektronix",
        "003E": "Oracle Corporation",
        "00BF": "Silicon Storage Technology",
        "0040": "ProMos/Mosel Vitelic",
        "00C1": "Infineon (Siemens)",
        "00C2": "Macronix",
        "0043": "Xerox",
        "00C4": "Plus Logic",
        "0045": "SanDisk Technologies Inc",
        "0046": "Elan Circuit Tech.",
        "00C7": "European Silicon Str.",
        "00C8": "Apple Computer",
        "0049": "Xilinx",
        "004A": "Compaq",
        "00CB": "Protocol Engines",
        "004C": "SCI",
        "00CD": "ABLIC",
        "00CE": "Samsung",
        "004F": "I3 Design System",
        "00D0": "Klic",
        "0051": "Crosspoint Solutions",
        "0052": "Alliance Memory Inc",
        "00D3": "Tandem",
        "0054": "Hewlett-Packard",
        "00D5": "Integrated Silicon Solutions",
        "00D6": "Brooktree",
        "0057": "New Media",
        "0058": "MHS Electronic",
        "00D9": "Performance Semi.",
        "00DA": "Winbond Electronic",
        "005B": "Kawasaki Steel",
        "00DC": "Bright Micro",
        "005D": "TECMAR",
        "005E": "Exar",
        "00DF": "PCMCIA",
        "00E0": "LG Semi (Goldstar)",
        "0061": "Northern Telecom",
        "0062": "Sanyo",
        "00E3": "Array Microsystems",
        "0064": "Crystal Semiconductor",
        "00E5": "Analog Devices",
        "00E6": "PMC-Sierra",
        "0067": "Asparix",
        "0068": "Convex Computer",
        "00E9": "Quality Semiconductor",
        "00EA": "Nimbus Technology",
        "006B": "Transwitch",
        "00EC": "Micronas (ITT Intermetall)",
        "006D": "Cannon",
        "006E": "Altera",
        "00EF": "NEXCOM",
        "0070": "Qualcomm",
        "00F1": "Sony",
        "00F2": "Cray Research",
        "0073": "AMS(Austria Micro)",
        "00F4": "Vitesse",
        "0075": "Aster Electronics",
        "0076": "Bay Networks (Synoptic)",
        "00F7": "Zentrum/ZMD",
        "00F8": "TRW",
        "0079": "Thesys",
        "007A": "Solbourne Computer",
        "00FB": "Allied-Signal",
        "007C": "Dialog Semiconductor",
        "00FD": "Media Vision",
        "00FE": "Numonyx Corporation",
        "0101": "Cirrus Logic",
        "0102": "National Instruments",
        "0183": "ILC Data Device",
        "0104": "Alcatel Mietec",
        "0185": "Micro Linear",
        "0186": "Univ. of NC",
        "0107": "JTAG Technologies",
        "0108": "BAE Systems (Loral)",
        "0189": "Nchip",
        "018A": "Galileo Tech",
        "010B": "Bestlink Systems",
        "018C": "Graychip",
        "010D": "GENNUM",
        "010E": "Imagination Technologies Limited",
        "018F": "Robert Bosch",
        "0110": "Chip Express",
        "0191": "DATARAM",
        "0192": "United Microelectronics Corp",
        "0113": "TCSI",
        "0194": "Smart Modular",
        "0115": "Hughes Aircraft",
        "0116": "Lanstar Semiconductor",
        "0197": "Qlogic",
        "0198": "Kingston",
        "0119": "Music Semi",
        "011A": "Ericsson Components",
        "019B": "SpaSE",
        "011C": "Eon Silicon Devices",
        "019D": "Integrated Silicon Solution (ISSI)",
        "019E": "DoD",
        "011F": "Integ. Memories Tech.",
        "0120": "Corollary Inc",
        "01A1": "Dallas Semiconductor",
        "01A2": "Omnivision",
        "0123": "EIV (Switzerland)",
        "01A4": "Novatel Wireless",
        "0125": "Zarlink (Mitel)",
        "0126": "Clearpoint",
        "01A7": "Cabletron",
        "01A8": "STEC (Silicon Tech)",
        "0129": "Vanguard",
        "012A": "Hagiwara Solutions Co Ltd",
        "01AB": "Vantis",
        "012C": "Celestica",
        "01AD": "Century",
        "01AE": "Hal Computers",
        "012F": "Rohm Company Ltd",
        "01B0": "Juniper Networks",
        "0131": "Libit Signal Processing",
        "0132": "Mushkin Enhanced Memory",
        "01B3": "Tundra Semiconductor",
        "0134": "Adaptec Inc",
        "01B5": "LightSpeed Semi.",
        "01B6": "ZSP Corp",
        "0137": "AMIC Technology",
        "0138": "Adobe Systems",
        "01B9": "Dynachip",
        "01BA": "PNY Technologies Inc",
        "013B": "Newport Digital",
        "01BC": "MMC Networks",
        "013D": "T Square",
        "013E": "Seiko Epson",
        "01BF": "Broadcom",
        "0140": "Viking Components",
        "01C1": "V3 Semiconductor",
        "01C2": "Flextronics (Orbit Semiconductor)",
        "0143": "Suwa Electronics",
        "01C4": "Transmeta",
        "0145": "Micron CMS",
        "0146": "American Computer & Digital Components Inc",
        "01C7": "Enhance 3000 Inc",
        "01C8": "Tower Semiconductor",
        "0149": "CPU Design",
        "014A": "Price Point",
        "01CB": "Maxim Integrated Product",
        "014C": "Tellabs",
        "01CD": "Centaur Technology",
        "01CE": "Unigen Corporation",
        "014F": "Transcend",
        "01D0": "Memory Card Technology",
        "0151": "CKD Corporation Ltd",
        "0152": "Capital Instruments Inc",
        "01D3": "Aica Kogyo Ltd",
        "0154": "Linvex Technology",
        "01D5": "MSC Vertriebs GmbH",
        "01D6": "AKM Company Ltd",
        "0157": "Dynamem Inc",
        "0158": "NERA ASA",
        "01D9": "GSI Technology",
        "01DA": "Dane-Elec (C Memory)",
        "015B": "Acorn Computers",
        "01DC": "Lara Technology",
        "015D": "Oak Technology Inc",
        "015E": "Itec Memory",
        "01DF": "Tanisys Technology",
        "01E0": "Truevision",
        "0161": "Wintec Industries",
        "0162": "Super PC Memory",
        "01E3": "MGV Memory",
        "0164": "Galvantech",
        "01E5": "Gadzoox Networks",
        "01E6": "Multi Dimensional Cons.",
        "0167": "GateField",
        "0168": "Integrated Memory System",
        "01E9": "Triscend",
        "01EA": "XaQti",
        "016B": "Goldenram",
        "01EC": "Clear Logic",
        "016D": "Cimaron Communications",
        "016E": "Nippon Steel Semi. Corp",
        "01EF": "Advantage Memory",
        "0170": "AMCC",
        "01F1": "LeCroy",
        "01F2": "Yamaha Corporation",
        "0173": "Digital Microwave",
        "01F4": "NetLogic Microsystems",
        "0175": "MIMOS Semiconductor",
        "0176": "Advanced Fibre",
        "01F7": "BF Goodrich Data.",
        "01F8": "Epigram",
        "0179": "Acbel Polytech Inc",
        "017A": "Apacer Technology",
        "01FB": "Admor Memory",
        "017C": "FOXCONN",
        "01FD": "Quadratics Superconductor",
        "01FE": "3COM",
    },
}

program_name: str = "lsdimm"
program_version: str = "0.0.7"
program_copyright: str = "Copyright © 2025 David Weinehall"
program_license: str = "This is free software; see the source for copying conditions.  " \
                       "There is NO\n"
program_license += "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
program_authors: str = "Written by David Weinehall."


def usage() -> int:
    """
    Display usage information for the program.
    """

    print(f"{PROGRAMNAME}{program_name}{RESET} [OPTION]...")
    print()
    print("Display information about memory configuration in a terse manner.")
    print()
    print(f"{OPTION}--color{RESET} {ARGUMENT}WHEN{RESET}                     "
          f"{ARGUMENT}WHEN{RESET} "
          "should the output use ANSI-colors")
    print("                                   Valid options are:")
    print(f"                                   {ARGUMENT}always{RESET}, {ARGUMENT}auto{RESET}, "
          f"{ARGUMENT}never{RESET}")
    print(f"{OPTION}--fix-quirks{RESET} {ARGUMENT}QUIRK{SEPARATOR},{ARGUMENT}...{RESET}           "
          f"Fix known quirks")
    print("                                   Valid options are:")
    print(f"                                   {ARGUMENT}all{RESET}, "
          f"{ARGUMENT}manufacturer{RESET}, {ARGUMENT}none{RESET}")
    print(f"                                   Default: {ARGUMENT}all{RESET}")
    print(f"{OPTION}--format{RESET} {ARGUMENT}FORMAT{RESET}                  "
          f"Output the result as {ARGUMENT}FORMAT{RESET}")
    print("                                   Valid options are:")
    print(f"                                   {ARGUMENT}default{RESET}, {ARGUMENT}json{RESET}, "
          f"{ARGUMENT}text{RESET}")
    print(f"{OPTION}--group-empty{RESET}                       "
          f"Group empty memory slots")
    print(f"{OPTION}--no-stats{RESET}                       "
          f"Do not output detailed information")
    print("                                   "
          "This option cannot be combined")
    print("                                   "
          f"with {OPTION}--no-summary{RESET}")
    print(f"{OPTION}--no-summary{RESET}                     "
          f"Do not output a summary")
    print("                                   "
          "This option cannot be combined")
    print("                                   "
          f"with {OPTION}--no-stats{RESET}")
    print(f"{OPTION}--reverse{RESET}                        "
          "Reverse sort order")
    print(f"{OPTION}--sort-column{RESET} {ARGUMENT}SORT_COLUMN{RESET}        "
          f"Use {ARGUMENT}SORT_COLUMN{RESET} as sort-column")
    print("                                   Valid options are:")
    print(f"                                   {ARGUMENT}default{RESET}, {ARGUMENT}locator{RESET}, "
          f"{ARGUMENT}size{RESET}, {ARGUMENT}type{RESET},")
    print(f"                                   {ARGUMENT}speed-and-voltage{RESET}, "
          f"{ARGUMENT}manufacturer{RESET}, {ARGUMENT}part-number{RESET}")
    print(f"                                   Default: {ARGUMENT}locator{RESET}")
    print(f"{OPTION}--summary-keys{RESET} {ARGUMENT}SUMMARY_KEYS{SEPARATOR},{ARGUMENT}...{RESET}  "
          "Extra keys to include when summarising")
    print(f"                                   By default {ARGUMENT}size{RESET}, "
          f"{ARGUMENT}type{RESET}, {ARGUMENT}speed{RESET}, and {ARGUMENT}voltage{RESET}")
    print("                                   are implicitly used when determining")
    print("                                   if a DIMM-type is unique; additional keys")
    print("                                   may be used.")
    print("                                   Valid additional keys are:")
    print(f"                                   {ARGUMENT}all{RESET}, "
          f"{ARGUMENT}manufacturer{RESET}, "
          f"{ARGUMENT}none{RESET}, "
          f"{ARGUMENT}part-number{RESET}")
    print(f"                                   Default: {ARGUMENT}manufacturer{RESET}")
    print()
    print(f"{OPTION}help{RESET}|{OPTION}--help{RESET}          Display this help and exit")
    print(f"{OPTION}version{RESET}|{OPTION}--version{RESET}    Output version information and exit")
    return 0


def version() -> int:
    """
    Display version information for the program.
    """

    print(f"{PROGRAMNAME}{program_name}{RESET} {program_version}")
    print()
    print(program_copyright)
    print(program_license)
    print()
    print(program_authors)
    return 0


def configure_ansicodes(use_ansicodes: str = "auto") -> None:
    """
    Configure use of ANSI-codes.
    """
    global ERROR, RESET, PROGRAMNAME, HEADER, DIM  # pylint: disable=global-statement
    global OPTION, ARGUMENT  # pylint: disable=global-statement

    if use_ansicodes == "auto":
        if not sys.stderr.isatty() or not sys.stdout.isatty():
            use_ansicodes = "never"
        else:
            use_ansicodes = "always"

    if use_ansicodes == "always":
        ERROR = "\033[0;31m"              # red
        RESET = "\033[0m"                 # reset all attributes
        PROGRAMNAME = "\033[1;37m"        # white + bright
        HEADER = "\033[1;37m"             # white + bright
        DIM = "\033[38;5;240m\033[1m"     # grey + dim + bold
        OPTION = "\033[0;36m"             # cyan
        ARGUMENT = "\033[0;32m"           # green
    else:
        ERROR = ""
        RESET = ""
        PROGRAMNAME = ""
        HEADER = ""
        DIM = ""
        OPTION = ""
        ARGUMENT = ""


def normalise_str_to_bytes(string: str) -> int:
    """
    Given a value with units, normalise it to bytes.
    Note: Typically invalid size strings return 0 as size,
    but if the string happens to end with a valid unit this function
    will throw an exception that should be caught.

        Parameters:
            string (str): A string with units
        Returns:
            (int): The value in bytes
    """
    value = 0
    # To allow modifying for KiB, etc. instead.
    base: int = 1000

    unit_lookup = {
        "kB": base ** 1,
        "MB": base ** 2,
        "GB": base ** 3,
        "TB": base ** 4,
        "PB": base ** 5,
        "EB": base ** 6,
        "ZB": base ** 7,
        "YB": base ** 8,
    }

    if string.isnumeric():
        value = int(string)
    else:
        for unit, multiplier in unit_lookup.items():
            if string.endswith(unit):
                value = int(string.removesuffix(unit).strip()) * multiplier
                break

    return value


def normalise_bytes_to_str(value: int) -> str:
    """
    Convert a value in bytes into a normalised string.

        Parameters:
            value (int):
        Returns:
            (str): The human readable value
    """
    suffix: str = ""
    # To allow modifying for KiB, etc. instead.
    base: int = 1000

    suffixes: tuple[str, ...] = (
        " bytes",    # base ** 1
        "kB",       # base ** 2
        "MB",       # base ** 3
        "GB",       # base ** 4
        "TB",       # base ** 5
        "PB",       # base ** 6
        "EB",       # base ** 7
        "ZB",       # base ** 8
        "YB",       # base ** 9
    )

    tmp_value: float = float(value)

    for i, suffix in enumerate(suffixes):
        if tmp_value < base or i >= len(suffixes) - 1:
            break
        tmp_value /= base ** 1

    return f"{int(tmp_value)}{suffix}"


# pylint: disable-next=too-many-branches,too-many-locals,too-many-statements
def parse_output(data: list[str], **kwargs: Any) -> dict[str, dict[str, Any]]:
    """
    Parse the output from dmidecode.

        Parameters:
            data ([str]): The output from dmidecode split into lines
            **kwargs (dict[str, Any]): Keyword arguments
                quirks (list[str]): A list of quirks to apply
        Returns:
            (dict[str, dict[str, Any]]): A dictionary with information for each DIMM.
    """
    global voltage_source  # pylint: disable=global-statement
    dimms: dict[str, dict[str, Any]] = {"tmp": {}}
    block: bool = False
    quirks: list[str] = kwargs.get("quirks", [])

    # pylint: disable-next=too-many-nested-blocks
    for line in data:
        # A block ends when we get an empty line
        if block:
            if line == "":
                dimm_bank_locator = dimms["tmp"].get("Bank Locator", "<empty>")
                dimm_locator = dimms["tmp"].get("Locator", "<empty>")
                dimm_handle = ""
                if dimm_bank_locator != "Not Specified":
                    dimm_handle = f"{dimm_bank_locator}, "
                dimm_handle = dimm_handle + f"{dimm_locator}"
                dimm_size = dimms["tmp"].get("Size", "<empty>")
                dimm_type = dimms["tmp"].get("Type", "<empty>")
                dimm_speed = dimms["tmp"].get("Speed", "<empty>")
                if voltage_source == "Heuristic":
                    voltage_source = "Configured Voltage"
                dimm_voltage = dimms["tmp"].get(voltage_source, "<empty>")
                try:
                    if float(dimm_voltage.split(" ", maxsplit=1)[0]) < voltage_limit:
                        dimm_voltage = dimms["tmp"].get("Minimum Voltage", "<empty>")
                except ValueError:
                    pass
                try:
                    if float(dimm_voltage.split(" ", maxsplit=1)[0]) < voltage_limit:
                        dimm_voltage = dimms["tmp"].get("Maximum Voltage", "<empty>")
                except ValueError:
                    pass
                try:
                    if float(dimm_voltage.split(" ", maxsplit=1)[0]) < voltage_limit:
                        dimm_voltage = "<unavailable>"
                except ValueError:
                    dimm_voltage = "<unavailable>"

                dimm_manufacturer = dimms["tmp"].get("Manufacturer", "<empty>")
                if "manufacturer" in quirks:
                    tmp_dimm_manufacturer = dimm_manufacturer
                    if dimm_manufacturer in vendor_quirks["exact"]:
                        tmp_dimm_manufacturer = vendor_quirks["exact"][dimm_manufacturer]
                    else:
                        for affix in vendor_quirks["affixes"]:
                            if dimm_manufacturer.startswith(affix):
                                tmp_dimm_manufacturer = vendor_quirks["affixes"][affix]
                                if not dimm_manufacturer.endswith(affix):
                                    # The prefix and suffix can be arbitrary length,
                                    # but longer entries are added at the end of the JEDEC
                                    # ID list. Hence we identify the prefix in order,
                                    # and the suffix in reverse order.
                                    for affix in reversed(vendor_quirks["affixes"]):
                                        if dimm_manufacturer.endswith(affix):
                                            tmp_dimm_manufacturer += \
                                                f" [{vendor_quirks['affixes'][affix]}]"
                    dimm_manufacturer = tmp_dimm_manufacturer
                dimm_part_number = dimms["tmp"].get("Part Number", "<empty>")
                dimms[dimm_handle] = {
                    "Size": dimm_size,
                    "Type": dimm_type,
                    "Speed": dimm_speed,
                    "Voltage": dimm_voltage,
                    "Manufacturer": dimm_manufacturer,
                    "Part Number": dimm_part_number,
                }
                block = False
                continue

            if line.startswith("Memory Device"):
                continue

            try:
                key, value = line.strip().split(": ", maxsplit=1)
            except ValueError:
                if line.strip().endswith(":"):
                    key = line[:-1]
                    value = "<empty>"
                else:
                    raise
            dimms["tmp"][key] = value

        if line.startswith("Handle"):
            # Flush the previous temporary block
            dimms["tmp"] = {}
            block = True

    dimms.pop("tmp", None)

    return dimms


# pylint: disable-next=too-many-branches,too-many-locals,too-many-statements
def main() -> int:
    """
    Main function for the program.

        Returns:
            0 on success, errno on failure
    """
    output_format: str = "text"
    sort_column: SortColumn = SortColumn.DEFAULT
    reverse: bool = False
    color: str = "auto"
    summary_keys: list[str] = ["manufacturer"]
    no_stats: bool = False
    no_summary: bool = False
    valid_real_quirks: set[str] = {"manufacturer"}
    quirks: list[str] = list(valid_real_quirks)
    group_empty: bool = False

    i: int = 1

    while i < len(sys.argv):
        arg = sys.argv[i]

        if arg in ("help", "--help"):
            usage()
            sys.exit(0)

        if arg in ("version", "--version"):
            version()
            sys.exit(0)

        if arg == "--color":
            i += 1
            if i >= len(sys.argv):
                print(f"{PROGRAMNAME}{program_name}{RESET}: Missing argument for "
                      f"{OPTION}--color{RESET}.",
                      file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)
            color = sys.argv[i]
            if color not in ("always", "auto", "never"):
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument for "
                      f"{OPTION}--color{RESET}; "
                      f"{ARGUMENT}WHEN{RESET} must be one of:",
                      file=sys.stderr)

                color_options: str = ""

                for i, color_option in enumerate(("always", "auto", "never")):
                    if i > 0:
                        color_options += ", "
                    color_options += f"{ARGUMENT}{color_option}{RESET}"

                print(color_options, file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)
            configure_ansicodes(use_ansicodes=color)
            i += 1
            continue

        if arg == "--fix-quirks":
            i += 1
            if i >= len(sys.argv):
                print(f"{PROGRAMNAME}{program_name}{RESET}: Missing argument for "
                      f"{OPTION}--fix-quirks{RESET}.",
                      file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)

            quirks = sys.argv[i].split(",")

            valid_quirks: set[str] = {"all", "manufacturer", "none"}
            invalid_args: set[str] = set(quirks) - valid_quirks

            if invalid_args:
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument(s) for "
                      f"{OPTION}--fix-quirks{RESET}; "
                      f"{ARGUMENT}QUIRK{SEPARATOR},{ARGUMENT}...{RESET} must be one of:",
                      file=sys.stderr)

                string: str = ""

                for i, quirk in enumerate(valid_quirks):
                    if i > 0:
                        string += ", "
                    string += f"{ARGUMENT}{quirk}{RESET}"

                print(string, file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)

            if "all" in quirks and len(quirks) > 1:
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument(s) for "
                      f"{OPTION}--fix-quirks{RESET}; "
                      f"{ARGUMENT}all{RESET} cannot be combined with other arguments.",
                      file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)

            if "none" in quirks and len(quirks) > 1:
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument(s) for "
                      f"{OPTION}--fix-quirks{RESET}; "
                      f"{ARGUMENT}none{RESET} cannot be combined with other arguments.",
                      file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)

            if quirks == ["all"]:
                quirks = list(valid_real_quirks)
            if quirks == ["none"]:
                quirks = []

            i += 1
            continue

        if arg == "--format":
            i += 1
            if i >= len(sys.argv):
                print(f"{PROGRAMNAME}{program_name}{RESET}: Missing argument for "
                      f"{OPTION}--format{RESET}.",
                      file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)
            output_format = sys.argv[i]
            if output_format not in ("default", "json", "text"):
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument for "
                      f"{OPTION}--format{RESET}; "
                      f"{ARGUMENT}FORMAT{RESET} must be one of:",
                      file=sys.stderr)

                format_options: str = ""

                for i, format_option in enumerate(("default", "json", "text")):
                    if i > 0:
                        format_options += ", "
                    format_options += f"{ARGUMENT}{format_option}{RESET}"

                print(format_options, file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)
            if output_format == "default":
                output_format = "text"
            i += 1
            continue

        if arg == "--group-empty":
            group_empty = True
            i += 1
            continue

        if arg == "--no-stats":
            no_stats = True
            i += 1
            continue

        if arg == "--no-summary":
            no_summary = True
            i += 1
            continue

        if arg == "--reverse":
            reverse = True
            i += 1
            continue

        if arg == "--sort-column":
            i += 1
            if i >= len(sys.argv):
                print(f"{PROGRAMNAME}{program_name}{RESET}: Missing argument for "
                      f"{OPTION}--sort-column{RESET}.",
                      file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)

            sort_column = sort_column_lookup.get(sys.argv[i], SortColumn.INVALID)

            if sort_column == -1:
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument for "
                      f"{OPTION}--sort-column{RESET}; "
                      f"{ARGUMENT}SORT_COLUMN{RESET} must be one of:",
                      file=sys.stderr)

                columns: str = ""

                for i, column in enumerate(sort_column_lookup):
                    if i > 0:
                        columns += ", "
                    columns += f"{ARGUMENT}{column}{RESET}"

                print(columns, file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)
            i += 1
            continue

        if arg == "--summary-keys":
            i += 1
            if i >= len(sys.argv):
                print(f"{PROGRAMNAME}{program_name}{RESET}: Missing argument for "
                      f"{OPTION}--summary-keys{RESET}.",
                      file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)

            summary_keys = sys.argv[i].split(",")

            valid_real_summary_keys: set[str] = {"manufacturer", "part-number"}
            valid_summary_keys: set[str] = {"all", "manufacturer", "none", "part-number"}
            invalid_args = set(summary_keys) - valid_summary_keys

            if invalid_args:
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument(s) for "
                      f"{OPTION}--summary-keys{RESET}; "
                      f"{ARGUMENT}SUMMARY_KEY{SEPARATOR},{ARGUMENT}...{RESET} must be one of:",
                      file=sys.stderr)

                string = ""

                for i, summary_key in enumerate(valid_summary_keys):
                    if i > 0:
                        string += ", "
                    string += f"{ARGUMENT}{summary_key}{RESET}"

                print(string, file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)

            if "all" in summary_keys and len(summary_keys) > 1:
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument(s) for "
                      f"{OPTION}--summary-keys{RESET}; "
                      f"{ARGUMENT}all{RESET} cannot be combined with other arguments.",
                      file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)

            if "none" in summary_keys and len(summary_keys) > 1:
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument(s) for "
                      f"{OPTION}--summary-keys{RESET}; "
                      f"{ARGUMENT}none{RESET} cannot be combined with other arguments.",
                      file=sys.stderr)
                print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)

            if summary_keys == ["all"]:
                summary_keys = list(valid_real_summary_keys)
            if summary_keys == ["none"]:
                summary_keys = []

            i += 1
            continue

        print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument.",
              file=sys.stderr)
        print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
              file=sys.stderr)
        sys.exit(errno.EINVAL)

    if no_stats and no_summary:
        print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid arguments; "
              f"{OPTION}--no-stats{RESET} cannot be combined with {OPTION}--no-summary{RESET}.",
              file=sys.stderr)
        print(f"Try “{PROGRAMNAME}{program_name}{RESET} help“ for more information.",
              file=sys.stderr)
        sys.exit(errno.EINVAL)

    dmidecode_args: list[str] = ["-t", "17"]
    data: list[str] = []
    dmidecode_missing: bool = True

    for dmidecode_path in dmidecode_paths:
        try:
            result = subprocess.run([dmidecode_path] + dmidecode_args,
                                    stdout=PIPE, stderr=STDOUT, check=False)
            tmp_data = result.stdout.decode("utf-8", errors="replace")
            if "Permission denied" in tmp_data or "Can't read memory" in tmp_data:
                print(f"{ERROR}Error{RESET}: Could not access data from "
                      f"{PROGRAMNAME}dmidecode{RESET}"
                      f"; this program probably needs to be executed with root privileges.")
                sys.exit(errno.EPERM)
            data = tmp_data.splitlines()
            dmidecode_missing = False
            break
        except FileNotFoundError:
            continue

    if not data:
        if dmidecode_missing:
            print(f"{ERROR}Error{RESET}: Could not find "
                  f"{PROGRAMNAME}dmidecode{RESET}"
                  f"; is it installed?")
            sys.exit(errno.ENOENT)

    dimms: dict[str, dict[str, Any]] = parse_output(data, quirks=quirks)

    widths: list[int] = [0, 0, 0, 0, 0, 0]
    rows: list[list[str]] = []

    summary: dict[str, dict[str, Any]] = {}

    mem_total_bytes: int = 0

    for dimm_handle, dimm in dimms.items():
        row: list[str] = []
        row.append(dimm_handle)
        dimm_size = dimm["Size"]
        dimm_type = dimm["Type"]
        dimm_speed = dimm["Speed"]
        dimm_voltage = dimm["Voltage"]
        dimm_manufacturer = dimm["Manufacturer"]
        dimm_part_number = dimm["Part Number"]

        row.append(dimm_size)
        row.append(dimm_type)
        row.append(f"{dimm_speed}, {dimm_voltage}")
        row.append(dimm_manufacturer)
        row.append(dimm_part_number)
        rows.append(row)

        try:
            tmp = normalise_str_to_bytes(dimm_size)
            mem_total_bytes += tmp
        except (ValueError, TypeError):
            print(f"{WARNING}Warning{RESET}: Could not convert DIMM-size {dimm_size} "
                  "to bytes; ignoring.")

        dimm_key: str = ""
        if "manufacturer" in summary_keys:
            dimm_key += f"{dimm_manufacturer} "
        if "part-number" in summary_keys:
            dimm_key += f"{dimm_part_number} "
        if dimm_key:
            dimm_key += "/ "
        dimm_key = dimm_key + f"{dimm_size} / {dimm_type} / {dimm_speed}, {dimm_voltage}"
        if dimm_key not in summary:
            summary[dimm_key] = {
                "Count": 0,
                "Location": [],
            }
        summary[dimm_key]["Count"] += 1
        summary[dimm_key]["Location"].append(dimm_handle)

    mem_total: str = normalise_bytes_to_str(mem_total_bytes)

    if output_format == "json":
        output_dict: dict[str, dict[str, Any]] = {}
        if not no_stats:
            output_dict = {**output_dict, **dimms}
        if not no_summary:
            output_dict["Summary"] = copy.deepcopy(summary)
            output_dict["Summary"]["Total"] = mem_total
        json_output: str = json.dumps(output_dict, indent=2)
        print(json_output)
        return 0

    rows = natsorted(rows, key=itemgetter(sort_column), reverse=reverse)
    if group_empty:
        empty_rows: list[list[str]] = []
        populated_rows: list[list[str]] = []
        for row in rows:
            if row[SortColumn.SIZE] == "No Module Installed":
                empty_rows.append(row)
            else:
                populated_rows.append(row)
        rows = populated_rows + empty_rows

    rows = [["Locator:", "Size:", "Type:", "Speed + Voltage:",
             "Manufacturer:", "Part Number:"]] + rows

    for i, row in enumerate(rows):
        for j, column in enumerate(row):
            widths[j] = max(widths[j], len(column))

    lines: list[str] = []

    if not no_stats:
        for i, row in enumerate(rows):
            populated: bool = row[SortColumn.SIZE] != "No Module Installed"
            output: str = ""

            for j, column in enumerate(row):
                # First row is a header, so we might want formatting
                formatting: str = RESET
                end_formatting: str = RESET
                if not i:
                    formatting = HEADER
                elif not populated:
                    formatting = DIM

                output += f"{formatting}{column.ljust(widths[j] + 2)}{end_formatting}"
            lines.append(output)

        print("\n".join(lines))

    if not no_summary:
        print(f"\n{HEADER}Count:{RESET}  {HEADER}Type + Location:{RESET}")
        for dimm_key in cast(str, natsorted(summary)):
            summary_data = summary.get(dimm_key, {})
            count = summary_data.get("Count", 0)
            locations = ">, <".join(summary_data.get("Location", "<unknown>"))
            if locations:
                locations = f"<{locations}>"
            print(f"{count:>6}  {dimm_key}: [{locations}]")

        print(f"\n{HEADER}Total:{RESET} {mem_total}")

    return 0


if __name__ == "__main__":
    main()
