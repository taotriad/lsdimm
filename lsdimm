#! /usr/bin/env python3
# [:::MUNGE SHEBANG:::]

# Copyright David Weinehall.
# SPDX-License-Identifier: MIT

"""
This program shows information about the memory configuration of a system
in a terse manner.
"""

from enum import IntEnum
import errno
import json
from operator import itemgetter
from pathlib import Path
import subprocess  # nosec
from subprocess import PIPE, STDOUT  # nosec
import sys
from typing import Any

HOMEDIR = Path.home()

# Strict set of paths; only distro-provided binaries
dmidecode_paths: list[str] = ["/usr/sbin/dmidecode", "/sbin/dmidecode"]
# Wider set of paths that contains locally installed packages
# dmidecode_paths: list[str] = ["/usr/sbin/dmidecode", "/sbin/dmidecode", "/opt/bin/dmidecode",
#                               "/usr/local/bin/dmidecode", f"{HOMEDIR}/bin/dmidecode"]

ARGUMENT: str = "\033[0;32m"              # green
DIM: str = "\033[38;5;240m\033[1m"        # grey + dim + bold
ERROR: str = "\033[0;31m"                 # red
HEADER: str = "\033[1;37m"                # white + bright
OPTION: str = "\033[0;36m"                # cyan
PROGRAMNAME: str = "\033[1;37m"           # white + bright
RESET: str = "\033[0m"                    # reset all attributes
SEPARATOR: str = "\033[38;5;240m\033[1m"  # grey + dim + bold


# In some cases the voltage information may be incorrect
# Options:
#   "Minimum Voltage"
#   "Maximum Voltage"
#   "Configured Voltage"
#   "Heuristic"  (Configured Voltage unless it's less than 0.25V this may need to be adjusted down
#                 if some type of low power DIMM is released that consumes less than that)
voltage_source: str = "Heuristic"
voltage_limit: float = 0.25


class SortColumn(IntEnum):
    """
    Sort column for the DIMM list.
    """
    DEFAULT = 0
    LOCATOR = 0
    SIZE = 1
    TYPE = 2
    SPEED_AND_VOLTAGE = 3
    MANUFACTURER = 4
    PART_NUMBER = 5
    INVALID = -1


sort_column_lookup: dict[str, SortColumn] = {
    "default": SortColumn.LOCATOR,
    "locator": SortColumn.LOCATOR,
    "size": SortColumn.SIZE,
    "type": SortColumn.TYPE,
    "speed-and-voltage": SortColumn.SPEED_AND_VOLTAGE,
    "manufacturer": SortColumn.MANUFACTURER,
    "part-number": SortColumn.PART_NUMBER,
}

program_name: str = "lsdimm"
program_version: str = "0.0.3"
program_copyright: str = "Copyright Â© 2025 David Weinehall"
program_license: str = "This is free software; see the source for copying conditions.  " \
                       "There is NO\n"
program_license += "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
program_authors: str = "Written by David Weinehall."


def usage() -> int:
    """
    Display usage information for the program.
    """

    print(f"{PROGRAMNAME}{program_name}{RESET} [OPTION]...")
    print()
    print("Display information about memory configuration in a terse manner.")
    print()
    print(f"{OPTION}--color{RESET} {ARGUMENT}WHEN{RESET}                     "
          f"{ARGUMENT}WHEN{RESET} "
          "should the output use ANSI-colors")
    print("                                   Valid options are:")
    print(f"                                   {ARGUMENT}always{RESET}, {ARGUMENT}auto{RESET}, "
          f"{ARGUMENT}never{RESET}")
    print(f"{OPTION}--format{RESET} {ARGUMENT}FORMAT{RESET}                  "
          f"Output the result as {ARGUMENT}FORMAT{RESET}")
    print("                                   Valid options are:")
    print(f"                                   {ARGUMENT}default{RESET}, {ARGUMENT}json{RESET}, "
          f"{ARGUMENT}text{RESET}")
    print(f"{OPTION}--no-summary{RESET}                     "
          "Do not output a summary")
    print(f"{OPTION}--reverse{RESET}                        "
          "Reverse sort order")
    print(f"{OPTION}--sort-column{RESET} {ARGUMENT}SORT_COLUMN{RESET}        "
          f"Use {ARGUMENT}SORT_COLUMN{RESET} as sort-column")
    print("                                   Valid options are:")
    print(f"                                   {ARGUMENT}default{RESET}, {ARGUMENT}locator{RESET}, "
          f"{ARGUMENT}size{RESET}, {ARGUMENT}type{RESET},")
    print(f"                                   {ARGUMENT}speed-and-voltage{RESET}, "
          f"{ARGUMENT}manufacturer{RESET}, {ARGUMENT}part-number{RESET}")
    print(f"                                   Default: {ARGUMENT}locator{RESET}")
    print(f"{OPTION}--summary-keys{RESET} {ARGUMENT}SUMMARY_KEYS{SEPARATOR},{ARGUMENT}...{RESET}  "
          "Extra keys to include when summarising")
    print(f"                                   By default {ARGUMENT}size{RESET}, "
          f"{ARGUMENT}type{RESET}, {ARGUMENT}speed{RESET}, and {ARGUMENT}voltage{RESET}")
    print("                                   are implicitly used when determining")
    print("                                   if a DIMM-type is unique; additional keys")
    print("                                   may be used.")
    print("                                   Valid additional keys are:")
    print(f"                                   {ARGUMENT}manufacturer{RESET}, "
          f"{ARGUMENT}none{RESET}, "
          f"{ARGUMENT}part-number{RESET}")
    print(f"                                   Default: {ARGUMENT}manufacturer{RESET}")
    print()
    print(f"{OPTION}help{RESET}|{OPTION}--help{RESET}          Display this help and exit")
    print(f"{OPTION}version{RESET}|{OPTION}--version{RESET}    Output version information and exit")
    return 0


def version() -> int:
    """
    Display version information for the program.
    """

    print(f"{PROGRAMNAME}{program_name}{RESET} {program_version}")
    print()
    print(program_copyright)
    print(program_license)
    print()
    print(program_authors)
    return 0


def configure_ansicodes(use_ansicodes: str = "auto") -> None:
    """
    Configure use of ANSI-codes.
    """
    global ERROR, RESET, PROGRAMNAME, HEADER, DIM  # pylint: disable=global-statement
    global OPTION, ARGUMENT  # pylint: disable=global-statement

    if use_ansicodes == "auto":
        if not sys.stderr.isatty() or not sys.stdout.isatty():
            use_ansicodes = "never"
        else:
            use_ansicodes = "always"

    if use_ansicodes == "always":
        ERROR = "\033[0;31m"              # red
        RESET = "\033[0m"                 # reset all attributes
        PROGRAMNAME = "\033[1;37m"        # white + bright
        HEADER = "\033[1;37m"             # white + bright
        DIM = "\033[38;5;240m\033[1m"     # grey + dim + bold
        OPTION = "\033[0;36m"             # cyan
        ARGUMENT = "\033[0;32m"           # green
    else:
        ERROR = ""
        RESET = ""
        PROGRAMNAME = ""
        HEADER = ""
        DIM = ""
        OPTION = ""
        ARGUMENT = ""


# pylint: disable-next=too-many-branches
def parse_output(data: list[str]) -> dict[str, dict[str, Any]]:
    """
    Parse the output from dmidecode.

        Parameters:
            data ([str]): The output from dmidecode split into lines
        Returns:
            (dict[str, dict[str, Any]]): A dictionary with information for each DIMM.
    """
    global voltage_source  # pylint: disable=global-statement
    dimms: dict[str, dict[str, Any]] = {"tmp": {}}
    block: bool = False

    for line in data:
        # A block ends when we get an empty line
        if block:
            if line == "":
                dimm_bank_locator = dimms["tmp"].get("Bank Locator", "<empty>")
                dimm_locator = dimms["tmp"].get("Locator", "<empty>")
                dimm_handle = f"{dimm_bank_locator}, {dimm_locator}"
                dimm_size = dimms["tmp"].get("Size", "<empty>")
                dimm_type = dimms["tmp"].get("Type", "<empty>")
                dimm_speed = dimms["tmp"].get("Speed", "<empty>")
                if voltage_source == "Heuristic":
                    voltage_source = "Configured Voltage"
                dimm_voltage = dimms["tmp"].get(voltage_source, "<empty>")
                try:
                    if float(dimm_voltage.split(" ", maxsplit=1)[0]) < voltage_limit:
                        dimm_voltage = dimms["tmp"].get("Minimum Voltage", "<empty>")
                except ValueError:
                    pass
                try:
                    if float(dimm_voltage.split(" ", maxsplit=1)[0]) < voltage_limit:
                        dimm_voltage = dimms["tmp"].get("Maximum Voltage", "<empty>")
                except ValueError:
                    pass
                try:
                    if float(dimm_voltage.split(" ", maxsplit=1)[0]) < voltage_limit:
                        dimm_voltage = "<unavailable>"
                except ValueError:
                    dimm_voltage = "<unavailable>"

                dimm_manufacturer = dimms["tmp"].get("Manufacturer", "<empty>")
                dimm_part_number = dimms["tmp"].get("Part Number", "<empty>")
                dimms[dimm_handle] = {
                    "Size": dimm_size,
                    "Type": dimm_type,
                    "Speed": dimm_speed,
                    "Voltage": dimm_voltage,
                    "Manufacturer": dimm_manufacturer,
                    "Part Number": dimm_part_number,
                }
                block = False
                continue

            if line.startswith("Memory Device"):
                continue

            try:
                key, value = line.strip().split(": ", maxsplit=1)
            except ValueError:
                if line.strip().endswith(":"):
                    key = line[:-1]
                    value = "<empty>"
                else:
                    raise
            dimms["tmp"][key] = value

        if line.startswith("Handle"):
            # Flush the previous temporary block
            dimms["tmp"] = {}
            block = True

    dimms.pop("tmp", None)

    return dimms


# pylint: disable-next=too-many-branches,too-many-locals,too-many-statements
def main() -> int:
    """
    Main function for the program.

        Returns:
            0 on success, errno on failure
    """
    output_format: str = "text"
    sort_column: SortColumn = SortColumn.DEFAULT
    reverse: bool = False
    color: str = "auto"
    summary_keys: list[str] = ["manufacturer"]
    no_summary: bool = False

    i: int = 1

    while i < len(sys.argv):
        arg = sys.argv[i]

        if arg in ("help", "--help"):
            usage()
            sys.exit(0)

        if arg in ("version", "--version"):
            version()
            sys.exit(0)

        if arg == "--color":
            i += 1
            if i >= len(sys.argv):
                print(f"{PROGRAMNAME}{program_name}{RESET}: Missing argument for "
                      f"{OPTION}--color{RESET}.",
                      file=sys.stderr)
                print(f"Try â{PROGRAMNAME}{program_name}{RESET} helpâ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)
            color = sys.argv[i]
            if color not in ("always", "auto", "never"):
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument for "
                      f"{OPTION}--color{RESET}; "
                      f"{ARGUMENT}WHEN{RESET} must be one of:",
                      file=sys.stderr)

                color_options: str = ""

                for i, color_option in enumerate(("always", "auto", "never")):
                    if i > 0:
                        color_options += ", "
                    color_options += f"{ARGUMENT}{color_option}{RESET}"

                print(color_options, file=sys.stderr)
                print(f"Try â{PROGRAMNAME}{program_name}{RESET} helpâ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)
            configure_ansicodes(use_ansicodes=color)
            i += 1
            continue

        if arg == "--format":
            i += 1
            if i >= len(sys.argv):
                print(f"{PROGRAMNAME}{program_name}{RESET}: Missing argument for "
                      f"{OPTION}--format{RESET}.",
                      file=sys.stderr)
                print(f"Try â{PROGRAMNAME}{program_name}{RESET} helpâ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)
            output_format = sys.argv[i]
            if output_format not in ("default", "json", "text"):
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument for "
                      f"{OPTION}--format{RESET}; "
                      f"{ARGUMENT}FORMAT{RESET} must be one of:",
                      file=sys.stderr)

                format_options: str = ""

                for i, format_option in enumerate(("default", "json", "text")):
                    if i > 0:
                        format_options += ", "
                    format_options += f"{ARGUMENT}{format_option}{RESET}"

                print(format_options, file=sys.stderr)
                print(f"Try â{PROGRAMNAME}{program_name}{RESET} helpâ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)
            if output_format == "default":
                output_format = "text"
            i += 1
            continue

        if arg == "--no-summary":
            no_summary = True
            i += 1
            continue

        if arg == "--reverse":
            reverse = True
            i += 1
            continue

        if arg == "--sort-column":
            i += 1
            if i >= len(sys.argv):
                print(f"{PROGRAMNAME}{program_name}{RESET}: Missing argument for "
                      f"{OPTION}--sort-column{RESET}.",
                      file=sys.stderr)
                print(f"Try â{PROGRAMNAME}{program_name}{RESET} helpâ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)

            sort_column = sort_column_lookup.get(sys.argv[i], SortColumn.INVALID)

            if sort_column == -1:
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument for "
                      f"{OPTION}--sort-column{RESET}; "
                      f"{ARGUMENT}SORT_COLUMN{RESET} must be one of:",
                      file=sys.stderr)

                columns: str = ""

                for i, column in enumerate(sort_column_lookup):
                    if i > 0:
                        columns += ", "
                    columns += f"{ARGUMENT}{column}{RESET}"

                print(columns, file=sys.stderr)
                print(f"Try â{PROGRAMNAME}{program_name}{RESET} helpâ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)
            i += 1
            continue

        if arg == "--summary-keys":
            i += 1
            if i >= len(sys.argv):
                print(f"{PROGRAMNAME}{program_name}{RESET}: Missing argument for "
                      f"{OPTION}--summary-keys{RESET}.",
                      file=sys.stderr)
                print(f"Try â{PROGRAMNAME}{program_name}{RESET} helpâ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)

            summary_keys = sys.argv[i].split(",")

            valid_summary_keys: set[str] = {"manufacturer", "none", "part-number"}
            invalid_args: set[str] = set(summary_keys) - valid_summary_keys

            if invalid_args:
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument(s) for "
                      f"{OPTION}--summary-keys{RESET}; "
                      f"{ARGUMENT}SUMMARY_KEY{SEPARATOR},{ARGUMENT}...{RESET} must be one of:",
                      file=sys.stderr)

                string: str = ""

                for i, summary_key in enumerate(valid_summary_keys):
                    if i > 0:
                        string += ", "
                    string += f"{ARGUMENT}{summary_key}{RESET}"

                print(string, file=sys.stderr)
                print(f"Try â{PROGRAMNAME}{program_name}{RESET} helpâ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)

            if "none" in summary_keys and len(summary_keys) > 1:
                print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument(s) for "
                      f"{OPTION}--summary-keys{RESET}; "
                      f"{ARGUMENT}none{RESET} cannot be combined with other arguments.",
                      file=sys.stderr)
                print(f"Try â{PROGRAMNAME}{program_name}{RESET} helpâ for more information.",
                      file=sys.stderr)
                sys.exit(errno.EINVAL)

            i += 1
            continue

        print(f"{PROGRAMNAME}{program_name}{RESET}: Invalid argument.",
              file=sys.stderr)
        print(f"Try â{PROGRAMNAME}{program_name}{RESET} helpâ for more information.",
              file=sys.stderr)
        sys.exit(errno.EINVAL)

    dmidecode_args: list[str] = ["-t", "17"]
    data: list[str] = []
    dmidecode_missing: bool = True

    for dmidecode_path in dmidecode_paths:
        try:
            result = subprocess.run([dmidecode_path] + dmidecode_args,
                                    stdout=PIPE, stderr=STDOUT, check=False)
            tmp_data = result.stdout.decode("utf-8", errors="replace")
            if "Permission denied" in tmp_data or "Can't read memory" in tmp_data:
                print(f"{ERROR}Error{RESET}: Could not access data from "
                      f"{PROGRAMNAME}dmidecode{RESET}"
                      f"; this program probably needs to be executed with root privileges.")
                sys.exit(errno.EPERM)
            data = tmp_data.splitlines()
            dmidecode_missing = False
            break
        except FileNotFoundError:
            continue

    if not data:
        if dmidecode_missing:
            print(f"{ERROR}Error{RESET}: Could not find "
                  f"{PROGRAMNAME}dmidecode{RESET}"
                  f"; is it installed?")
            sys.exit(errno.ENOENT)

    dimms: dict[str, dict[str, Any]] = parse_output(data)

    if output_format == "json":
        json_output: str = json.dumps(dimms, indent=2)
        print(json_output)
        return 0

    widths: list[int] = [0, 0, 0, 0, 0, 0]
    rows: list[list[str]] = []

    summary: dict[str, dict[str, Any]] = {}

    for dimm_handle, dimm in dimms.items():
        row: list[str] = []
        row.append(dimm_handle)
        dimm_size = dimm["Size"]
        dimm_type = dimm["Type"]
        dimm_speed = dimm["Speed"]
        dimm_voltage = dimm["Voltage"]
        dimm_manufacturer = dimm["Manufacturer"]
        dimm_part_number = dimm["Part Number"]

        row.append(dimm_size)
        row.append(dimm_type)
        row.append(f"{dimm_speed}, {dimm_voltage}")
        row.append(dimm_manufacturer)
        row.append(dimm_part_number)
        rows.append(row)

        dimm_key: str = ""
        if "manufacturer" in summary_keys:
            dimm_key += f"{dimm_manufacturer} "
        if "part-number" in summary_keys:
            dimm_key += f"{dimm_part_number} "
        if dimm_key:
            dimm_key += "/ "
        dimm_key = dimm_key + f"{dimm_size} / {dimm_type} / {dimm_speed}, {dimm_voltage}"
        if dimm_key not in summary:
            summary[dimm_key] = {
                "Count": 0,
                "Location": [],
            }
        summary[dimm_key]["Count"] += 1
        summary[dimm_key]["Location"].append(dimm_handle)

    rows = sorted(rows, key=itemgetter(sort_column), reverse=reverse)
    rows = [["Locator:", "Size:", "Type:", "Speed + Voltage:",
             "Manufacturer:", "Part Number:"]] + rows

    for i, row in enumerate(rows):
        for j, column in enumerate(row):
            widths[j] = max(widths[j], len(column))

    lines: list[str] = []

    for i, row in enumerate(rows):
        populated: bool = row[SortColumn.SIZE] != "No Module Installed"
        output: str = ""

        for j, column in enumerate(row):
            # First row is a header, so we might want formatting
            formatting: str = RESET
            end_formatting: str = RESET
            if not i:
                formatting = HEADER
            elif not populated:
                formatting = DIM

            output += f"{formatting}{column.ljust(widths[j] + 2)}{end_formatting}"
        lines.append(output)

    print("\n".join(lines))

    if not no_summary:
        print(f"\n{HEADER}Count:{RESET}  {HEADER}Type + Location:{RESET}")
        for dimm_key in sorted(summary):
            summary_data = summary.get(dimm_key, {})
            count = summary_data.get("Count", 0)
            locations = ">, <".join(summary_data.get("Location", "<unknown>"))
            if locations:
                locations = f"<{locations}>"
            print(f"{count:>6}  {dimm_key}: [{locations}]")

    return 0


if __name__ == "__main__":
    main()
